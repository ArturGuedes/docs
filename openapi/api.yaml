openapi: 3.1.0
info:
  version: 1.0.0
  title: Lumx API
  description: A cross-border banking API with instant settlements and unmatched liquidity, powered by stablecoins.
servers:
  - url: https://api-sandbox.lumx.io
  - url: https://api.lumx.io
paths:
  /customers:
    get:
      tags:
        - Customers
      summary: Read all customers
      description: This endpoint reads all customers.
      responses:
        "200":
          description: Resources successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    description: An array containing all customers.
                    type: array
                    items:
                      $ref: "#/components/schemas/CustomerResponse"
      security:
        - apiKey: []
    post:
      tags:
        - Customers
      summary: Create a customer
      description: This endpoint creates a customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerRequest"
      responses:
        "201":
          description: Resource successfully created.
          content:
            application/json:
              examples:
                individual:
                  value:
                    id: "3c90c3cc-0d44-4b50-8888-8dd25736052a"
                    type: "individual"
                    name: "John Doe"
                    taxId: "123.456.789-00"
                    birthDate: "1990-01-01"
                    address:
                      line1: "Rua Voluntários da Pátria, 89"
                      line2: "Apto 302"
                      country: "BRA"
                      state: "SP"
                      city: "São Paulo"
                      zipCode: "01234-567"
                    walletAddress: "0x1234567890123456789012345678901234567890"
                    blockExplorerUrl: "https://amoy.polygonscan.com/address/0x1234567890123456789012345678901234567890"
                    compliance:
                      status: "pending"
                      level: "standard"
                      transactionLimits:
                        single: "1000.00"
                        daily: "10000.00"
                        monthly: "100000.00"
                    createdAt: "2021-01-01T00:00:00Z"
                    updatedAt: "2021-01-01T00:00:00Z"
                business:
                  value:
                    id: "3c90c3cc-0d44-4b50-8888-8dd25736052a"
                    type: "business"
                    name: "John Doe"
                    taxId: "123.456.789-00"

  "/customers/{id}":
    get:
      tags:
        - Customers
      summary: Read a customer
      description: This endpoint reads a customer.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Customer's unique identifier.
        - name: includeBalances
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to include balances in the response.
      responses:
        "200":
          description: Resource successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        "404":
          description: Resource not found.
      security:
        - apiKey: []
  "/customers/{id}/documents":
    post:
      tags:
        - Customers
      summary: Upload a document
      description: This endpoint uploads a document of a customer.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Customer's unique identifier.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CustomerDocumentRequest"
      responses:
        "200":
          description: Resource successfully accepted.
      security:
        - apiKey: []
  "/customers/{id}/verify":
    post:
      tags:
        - Customers
      summary: Verify a customer
      description: This endpoint verifies a customer.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Customer's unique identifier.
      responses:
        "200":
          description: Resource successfully verified.
      security:
        - apiKey: []
  /exchange-rates:
    post:
      tags:
        - Exchange Rates
      summary: Get an exchange rate
      description: This endpoint returns an exchange rate quote currencies.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExchangeRateRequest"
      responses:
        "200":
          description: Resource successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeRateResponse"
      security:
        - apiKey: []
  /transactions:
    get:
      tags:
        - Transactions
      summary: Read all transactions
      description: This endpoint reads all of your transactions.
      responses:
        "200":
          description: Resources successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: An array containing all transactions.
                    items:
                      oneOf:
                        - type: object
                          title: On-ramps
                          allOf:
                            - $ref: "#/components/schemas/TransactionOnRampResponse"
                            - $ref: "#/components/schemas/TransactionTimestamps"
                        - type: object
                          title: Off-ramps
                          allOf:
                            - $ref: "#/components/schemas/TransactionOffRampResponse"
                            - $ref: "#/components/schemas/TransactionTimestamps"
                        - type: object
                          title: Transfers
                          allOf:
                            - $ref: "#/components/schemas/TransactionTransferResponse"
                            - $ref: "#/components/schemas/TransactionTimestamps"
  "/transactions/{id}":
    get:
      tags:
        - Transactions
      summary: Read a transaction
      description: This endpoint reads a transaction.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Resource successfully retrieved.
          content:
            application/json:
              examples:
                "type: on_ramp, state.status: awaiting_funds":
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    customerId: "123e4567-e89b-12d3-a456-426614174000"
                    type: "on_ramp"
                    request:
                      sourceCurrency: "BRL"
                      targetCurrency: "USDC"
                      amount: "10000.00"
                      payment:
                        rail: "pix"
                    state:
                      status: "awaiting_funds"
                      payment:
                        rail: "pix"
                        brCode: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:05Z"
                "type: on_ramp, state.status: processing":
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174002"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "on_ramp"
                    request:
                      sourceCurrency: "BRL"
                      targetCurrency: "USDC"
                      amount: "1000.00"
                      payment:
                        rail: "pix"
                    state:
                      status: "success"
                      payment:
                        rail: "pix"
                        brCode: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:05Z"
                "type: on_ramp, state.status: success":
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174002"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "on_ramp"
                    request:
                      sourceCurrency: "BRL"
                      targetCurrency: "USDC"
                      amount: "1000.00"
                      payment:
                        rail: "pix"
                    state:
                      status: "processing"
                      payment:
                        rail: "pix"
                        brCode: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
                      receipt:
                        rate: "6.0066"
                        sourceAmount: "1000.00"
                        targetAmount: "5925.55"
                        sourceCurrency: "USDC"
                        targetCurrency: "BRL"
                        fees:
                          currency: "USDC"
                          lumx:
                            percentage: "10.000000"
                            flat: "1"
                          developer:
                            percentage: "0.000000"
                            flat: "0"
                      blockchain:
                        transactionHash: "0x1234567890123456789012345678901234567890"
                        blockExplorerUrl: "https://amoy.polygonscan.com/tx/0x1234567890123456789012345678901234567890"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:05Z"
                "type: on_ramp, state.status: failed":
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174002"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "on_ramp"
                    request:
                      sourceCurrency: "BRL"
                      targetCurrency: "USDC"
                      amount: "1000.00"
                      payment:
                        rail: "pix"
                    state:
                      status: "failed"
                      payment:
                        rail: "pix"
                        brCode: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
                      error:
                        code: "INSUFFICIENT_FUNDS"
                        message: "The payment was rejected due to insufficient funds"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:05Z"
                "type: off_ramp, state.status: awaiting_funds":
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174003"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "off_ramp"
                    request:
                      sourceCurrency: "USDC"
                      targetCurrency: "BRL"
                      amount: "1000.00"
                      payment:
                        rail: "pix"
                        keyType: "email"
                        keyValue: "user@email.com"
                    state:
                      status: "awaiting_funds"
                      payment:
                        rail: "pix"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:05Z"
                "type: off_ramp, state.status: processing":
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174003"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "off_ramp"
                    request:
                      sourceCurrency: "USDC"
                      targetCurrency: "BRL"
                      amount: "1000.00"
                      payment:
                        rail: "pix"
                        keyType: "email"
                        keyValue: "user@email.com"
                    state:
                      status: "processing"
                      payment:
                        rail: "pix"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:05Z"
                "type: off_ramp, state.status: success":
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174003"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "off_ramp"
                    request:
                      sourceCurrency: "USDC"
                      targetCurrency: "BRL"
                      amount: "1000.00"
                      payment:
                        rail: "pix"
                        keyType: "email"
                        keyValue: "user@email.com"
                    state:
                      status: "success"
                      payment:
                        rail: "pix"
                      receipt:
                        rate: "6.0066"
                        sourceAmount: "1000.00"
                        targetAmount: "5925.55"
                        sourceCurrency: "USDC"
                        targetCurrency: "BRL"
                        fees:
                          currency: "USDC"
                          lumx:
                            percentage: "10.000000"
                            flat: "1"
                          developer:
                            percentage: "0.000000"
                            flat: "0"
                      blockchain:
                        transactionHash: "0x1234567890123456789012345678901234567890"
                        blockExplorerUrl: "https://amoy.polygonscan.com/tx/0x1234567890123456789012345678901234567890"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:05Z"
                "type: off_ramp, state.status: failed":
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174003"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "off_ramp"
                    request:
                      sourceCurrency: "USDC"
                      targetCurrency: "BRL"
                      amount: "1000.00"
                      payment:
                        rail: "pix"
                        keyType: "email"
                        keyValue: "user@email.com"
                    state:
                      status: "processing"
                      payment:
                        rail: "pix"
                      error:
                        code: "INVALID_PIX_KEY"
                        message: "The provided PIX key is invalid or not found"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:05Z"
              schema:
                allOf:
                  - $ref: "#/components/schemas/TransactionResponse"
                  - $ref: "#/components/schemas/TransactionTimestamps"
  /transactions/on-ramp:
    post:
      tags:
        - Transactions
      summary: On-ramp
      description: This endpoint converts fiat to stablecoin.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionOnRampRequest"
      responses:
        "201":
          description: Resource successfully created.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TransactionOnRampResponse"
                  - $ref: "#/components/schemas/TransactionTimestamps"
      security:
        - apiKey: []
  /transactions/off-ramp:
    post:
      tags:
        - Transactions
      summary: Off-ramp
      description: This endpoint converts stablecoin to fiat.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionOffRampRequest"
      responses:
        "201":
          description: Resource successfully created.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TransactionOffRampResponse"
                  - $ref: "#/components/schemas/TransactionTimestamps"
  /transactions/transfer:
    post:
      tags:
        - Transactions
      summary: Transfer
      description: This endpoint transfers funds between customers.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionTransferRequest"
      responses:
        "201":
          description: Resource successfully created.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TransactionTransferResponse"
                  - $ref: "#/components/schemas/TransactionTimestamps"
components:
  schemas:
    CustomerRequest:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Customer's unique identifier.
              format: uuid
              readOnly: true
        - oneOf:
            - allOf:
                - type: object
                  description: Customer type is individual
                  title: Individual
                - $ref: "#/components/schemas/CustomerIndividual"
            - allOf:
                - type: object
                  description: Customer type is business
                  title: Business
                - $ref: "#/components/schemas/CustomerBusiness"
      required:
        - id
        - type
        - name
        - legalName
        - taxId
        - birthDate
        - incorporationDate
        - address
    CustomerResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Customer's unique identifier.
              format: uuid
              readOnly: true
        - oneOf:
            - allOf:
                - $ref: "#/components/schemas/CustomerIndividual"
                  description: Customer type is individual
                  title: Individual
                - type: object
            - allOf:
                - $ref: "#/components/schemas/CustomerBusiness"
                  description: Customer type is business
                  title: Business
                - type: object
        - type: object
          properties:
            walletAddress:
              type: string
              description: Customer's wallet address.
              example: "0x1234567890123456789012345678901234567890"
            blockExplorerUrl:
              type: string
              description: Customer's block explorer URL.
              example: "https://amoy.polygonscan.com/address/0x1234567890123456789012345678901234567890"
            balances:
              type: array
              items:
                $ref: "#/components/schemas/CustomerBalance"
            compliance:
              $ref: "#/components/schemas/CustomerCompliance"
            createdAt:
              type: string
              description: Creation date and time.
              format: date-time
              example: "2021-01-01T00:00:00Z"
            updatedAt:
              type: string
              description: Last update date and time.
              format: date-time
              example: "2021-01-01T00:00:00Z"
    CustomerIndividual:
      type: object
      properties:
        type:
          type: string
          description: Customer's type.
          enum: ["individual"]
          example: "individual"
        name:
          type: string
          description: Customer full name
          example: "John Doe"
        taxId:
          type: string
          description: Customer's tax ID. It must be a valid tax ID where the country of the customer lives in.
          example: "123.456.789-00"
        birthDate:
          type: string
          description: Customer birth date
          format: date
          example: "1990-01-01"
        address:
          $ref: "#/components/schemas/CustomerAddress"
    CustomerBusiness:
      type: object
      properties:
        type:
          type: string
          description: Customer's type.
          enum: ["business"]
        legalName:
          type: string
          description: Customer legal name
          example: "Lumx S.A"
        taxId:
          type: string
          description: Customer's tax ID. It must be a valid tax ID where the country of the customer lives in.
          example: "42.887.120/0001-00"
        incorporationDate:
          type: string
          description: Customer incorporation date
          format: date
          example: "2020-01-01"
        address:
          $ref: "#/components/schemas/CustomerAddress"
    CustomerAddress:
      type: object
      description: Address where the customer is located.
      properties:
        line1:
          type: string
          description: Address's first line.
          example: "Rua Voluntários da Pátria, 89"
        line2:
          type: string
          description: Address's second line.
          example: "Apto 302"
        country:
          type: string
          description: Address's country code following ISO 3166-1 alpha-2.
          enum: [BRA]
          example: "BRA"
        state:
          type: string
          description: Address's state.
          example: "SP"
        city:
          type: string
          description: Address's city.
          example: "São Paulo"
        zipCode:
          type: string
          description: Address's zip code.
          example: "01234-567"
    CustomerCompliance:
      type: object
      properties:
        status:
          type: string
          description: Status of the customer's KYC.
          enum:
            ["pending", "approved", "final_rejection", "temporary_rejection"]
          example: "pending"
        level:
          type: string
          description: Level of the customer's KYC.
          enum: ["standard"]
          example: "standard"
        transactionLimits:
          type: object
          properties:
            single:
              type: string
              description: Single transaction limit for the customer's KYC.
              example: "1000.00"
            daily:
              type: string
              description: Daily limit for the customer's KYC.
              example: "10000.00"
            monthly:
              type: string
              description: Monthly limit for the customer's KYC.
              example: "100000.00"
    CustomerBalance:
      type: object
      properties:
        currency:
          type: string
          description: Balance's currency.
          enum: [USDC, USDT]
        amount:
          type: string
          description: Balance's amount.
          example: "1000.00"
        updatedAt:
          type: string
          description: Last update date and time.
          example: "2021-01-01T00:00:00Z"
    CustomerDocumentRequest:
      allOf:
        - oneOf:
            - allOf:
                - type: object
                  description: Customer type is individual
                  title: Individual
                  properties:
                    metadata:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Document type.
                          enum:
                            [id_card, passport, driving_license, utility_bill]
                        country:
                          type: string
                          description: Document country.
                          enum: [BRA]
                        side:
                          type: string
                          description: Document side. Only required for documents with both sides.
                          nullable: true
                          enum: [front_side, back_side]
                    file:
                      type: string
                      description: The document file to be uploaded.
                      format: binary
                - required:
                    - metadata
                    - file
            - allOf:
                - type: object
                  description: Customer type is business
                  title: Business
                  properties:
                    metadata:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Document type.
                          enum: [incorporation_articles, proof_of_address]
                        country:
                          type: string
                          description: Document country code following ISO 3166-1 alpha-2.
                          enum: [BRA]
                    file:
                      type: string
                      description: The document file to be uploaded.
                      format: binary
                - required:
                    - metadata
                    - file
    ExchangeRateRequest:
      allOf:
        - oneOf:
            - allOf:
                - type: object
                  description: Exchange rate type is floating
                  title: Floating
                - $ref: "#/components/schemas/ExchangeRateFloating"
            - allOf:
                - type: object
                  description: Exchange rate type is locked
                  title: Locked
                - $ref: "#/components/schemas/ExchangeRateLocked"
      required:
        - type
        - sourceCurrency
        - targetCurrency
        - sourceAmount
        - targetAmount
    ExchangeRateResponse:
      allOf:
        - oneOf:
            - allOf:
                - type: object
                  description: Exchange rate type is floating
                  title: Floating
                  properties:
                    type:
                      type: string
                      description: Exchange rate's type.
                      enum: ["floating"]
                      example: "floating"
            - allOf:
                - type: object
                  description: Exchange rate type is locked
                  title: Locked
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: Exchange rate's unique identifier.
                      example: "123e4567-e89b-12d3-a456-426614174000"
                    type:
                      type: string
                      description: Exchange rate's type.
                      enum: ["locked"]
                      example: "locked"
        - type: object
          properties:
            sourceCurrency:
              type: string
              description: Exchange rate's source currency.
              example: "USDC"
            sourceAmount:
              type: string
              description: Exchange rate's source amount.
              example: "10000.00"
            targetCurrency:
              type: string
              description: Exchange rate's target currency.
              example: "BRL"
            targetAmount:
              type: string
              description: Exchange rate's target amount.
              example: "59030.00"
            rate:
              type: string
              description: Exchange rate's rate.
              example: "5.9030"
    ExchangeRateFloating:
      type: object
      properties:
        type:
          type: string
          description: Exchange rate's type.
          enum: ["floating"]
          example: "floating"
        sourceCurrency:
          type: string
          enum: [BRL]
          description: Exchange rate's source currency.
          example: "BRL"
        sourceAmount:
          type: string
          description: Exchange rate's source amount.
          example: "10000.00"
        targetCurrency:
          type: string
          enum: [USDC, USDT]
          description: Exchange rate's target currency.
          example: "USDC"
    ExchangeRateLocked:
      type: object
      properties:
        type:
          type: string
          description: Exchange rate's type.
          enum: ["locked"]
          example: "locked"
        sourceCurrency:
          type: string
          enum: [BRL]
          description: Exchange rate's source currency.
          example: "BRL"
        targetCurrency:
          type: string
          enum: [USDC, USDT]
          description: Exchange rate's target currency.
          example: "USDC"
        targetAmount:
          type: string
          description: Exchange rate's target amount.
          example: "59030.00"
    TransactionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Transaction's unique identifier.
        customerId:
          type: string
          format: uuid
          description: Customer's unique identifier.
        type:
          type: string
          description: Transaction's type.
          enum: ["on_ramp", "off_ramp", "transfer"]
        request:
          type: object
          description: Transaction's request.
        state:
          type: object
          description: Transaction's state.
    TransactionOnRampRequest:
      allOf:
        - oneOf:
            - allOf:
                - type: object
                  description: On-ramp using floating exchange rate
                  title: Floating
                - $ref: "#/components/schemas/TransactionOnRampFloating"
            - allOf:
                - type: object
                  description: On-ramp using locked exchange rate
                  title: Locked
                - $ref: "#/components/schemas/TransactionOnRampLocked"
    TransactionOnRampLocked:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
          description: Customer's unique identifier.
          example: "123e4567-e89b-12d3-a456-426614174000"
        exchangeRateId:
          type: string
          format: uuid
          description: Exchange rate's id to be used for this transaction.
          example: "123e4567-e89b-12d3-a456-426614174000"
        payment:
          type: object
          properties:
            rail:
              type: string
              enum: [pix]
              description: Payment rail to be used.
              example: "pix"
      required:
        - customerId
        - payment
        - exchangeRateId
    TransactionOnRampFloating:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
          description: Customer's unique identifier.
          example: "123e4567-e89b-12d3-a456-426614174000"
        sourceCurrency:
          type: string
          enum: [BRL]
          description: Fiat currency to be converted.
          example: "BRL"
        targetCurrency:
          type: string
          enum: [USDC, USDT]
          description: Stablecoin to be received.
          example: "USDC"
        amount:
          type: string
          description: Amount to be converted. If exchangeRateId is provided, the amount MUST match the sourceAmount from the exchange rate response obtained previously.
          example: "10000.00"
        payment:
          type: object
          properties:
            rail:
              type: string
              enum: [pix]
              description: Payment rail to be used.
              example: "pix"
      required:
        - customerId
        - sourceCurrency
        - targetCurrency
        - amount
        - payment
    TransactionOnRampResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: On-ramp operation's unique identifier.
          example: "123e4567-e89b-12d3-a456-426614174000"
        customerId:
          type: string
          format: uuid
          description: Customer's unique identifier.
          example: "123e4567-e89b-12d3-a456-426614174000"
        type:
          type: string
          description: On-ramp operation's type.
          enum: ["on_ramp"]
          example: "on_ramp"
        request:
          type: object
          properties:
            sourceCurrency:
              type: string
              description: Fiat currency to be converted.
              example: "BRL"
            targetCurrency:
              type: string
              description: Stablecoin to be received.
              example: "USDC"
            amount:
              type: string
              description: Amount to be converted.
              example: "10000.00"
            payment:
              type: object
              properties:
                rail:
                  type: string
                  description: Payment rail to be used.
                  example: "pix"
        state:
          type: object
          properties:
            status:
              type: string
              description: Status of the on-ramp operation.
              example: "awaiting_funds"
            payment:
              type: object
              properties:
                rail:
                  type: string
                  description: Payment rail to be used.
                  example: "pix"
                brCode:
                  type: string
                  description: Payment's code.
                  example: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
    TransactionOffRampRequest:
      allOf:
        - oneOf:
            - allOf:
                - type: object
                  description: Off-ramp using floating exchange rate
                  title: Floating
                - $ref: "#/components/schemas/TransactionOffRampFloating"
            - allOf:
                - type: object
                  description: Off-ramp using locked exchange rate
                  title: Locked
                - $ref: "#/components/schemas/TransactionOffRampLocked"
    TransactionOffRampLocked:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
          description: Customer's unique identifier.
          example: "123e4567-e89b-12d3-a456-426614174000"
        exchangeRateId:
          type: string
          format: uuid
          description: Exchange rate's id to be used for this transaction.
          example: "123e4567-e89b-12d3-a456-426614174000"
        payment:
          type: object
          description: The definition of how and where the funds from the off ramp transaction will be sent.
          properties:
            rail:
              type: string
              enum: [pix]
              description: Payment rail to be used.
              example: "pix"
            keyType:
              type: string
              description: Payment rail's key type.
              enum: [email]
              example: "email"
            keyValue:
              type: string
              description: Payment rail's key value.
              example: "user@email.com"
      required:
        - customerId
        - payment
        - exchangeRateId
    TransactionOffRampFloating:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
          description: Customer's unique identifier.
          example: "123e4567-e89b-12d3-a456-426614174000"
        sourceCurrency:
          type: string
          enum: [USDC, USDT]
          description: Stablecoin to be converted.
          example: "USDC"
        targetCurrency:
          type: string
          enum: [BRL]
          description: Fiat currency to be received.
          example: "BRL"
        amount:
          type: string
          description: Amount to be converted. If exchangeRateId is provided, the amount MUST match the targetAmount from the exchange rate response obtained previously.
          example: "10000.00"
        payment:
          type: object
          description: The definition of how and where the funds from the off ramp transaction will be sent.
          properties:
            rail:
              type: string
              enum: [pix]
              description: Payment rail to be used.
              example: "pix"
            keyType:
              type: string
              description: Payment rail's key type.
              enum: [email]
              example: "email"
            keyValue:
              type: string
              description: Payment rail's key value.
              example: "user@email.com"
      required:
        - customerId
        - sourceCurrency
        - targetCurrency
        - amount
        - payment
    TransactionOffRampResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Off-ramp operation's unique identifier.
          example: "123e4567-e89b-12d3-a456-426614174000"
        customerId:
          type: string
          format: uuid
          description: Customer's unique identifier.
          example: "123e4567-e89b-12d3-a456-426614174000"
        type:
          type: string
          description: Off-ramp operation's type.
          enum: ["off_ramp"]
          example: "off_ramp"
        request:
          type: object
          properties:
            sourceCurrency:
              type: string
              description: Stablecoin to be converted.
              example: "USDC"
            targetCurrency:
              type: string
              description: Fiat currency to be received.
              example: "BRL"
            amount:
              type: string
              description: Amount to be converted.
              example: "10000.00"
            payment:
              type: object
              properties:
                rail:
                  type: string
                  description: Payment rail to be used.
                  example: "pix"
                keyType:
                  type: string
                  description: Payment rail's key type.
                  enum: [email]
                  example: "email"
                keyValue:
                  type: string
                  description: Payment rail's key value.
                  example: "user@email.com"
        state:
          type: object
          properties:
            status:
              type: string
              description: Status of the on-ramp operation.
              example: "awaiting_funds"
            payment:
              type: object
              properties:
                rail:
                  type: string
                  description: Payment rail to be used.
                  example: "pix"
    TransactionTransferRequest:
      type: object
      properties:
        currency:
          type: string
          enum: [USDC, USDT]
          description: Stablecoin to be transferred.
          example: "USDC"
        from:
          type: string
          format: uuid
          description: Customer's id that will send the tokens.
          example: "123e4567-e89b-12d3-a456-426614174000"
        to:
          type: string
          format: uuid
          description: Customer's id that will receive the tokens.
          example: "123e4567-e89b-12d3-a456-426614174000"
        amount:
          type: string
          description: Amount to be transferred.
          example: "10000.00"
      required:
        - currency
        - amount
        - from
        - to
    TransactionTransferResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Transfer operation's unique identifier.
          example: "123e4567-e89b-12d3-a456-426614174000"
        customerId:
          type: string
          format: uuid
          description: Customer's unique identifier.
          example: "123e4567-e89b-12d3-a456-426614174000"
        type:
          type: string
          description: Transfer operation's type.
          enum: ["transfer"]
          example: "transfer"
        request:
          type: object
        state:
          type: object
    TransactionTimestamps:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          description: Creation date and time.
        updatedAt:
          type: string
          format: date-time
          description: Last update date and time.
  securitySchemes:
    apiKey:
      type: http
      scheme: bearer
      description: Bearer authentication header of the form `Bearer <API_KEY>`.
