openapi: 3.1.0
info:
  version: 1.0.0
  title: Lumx API
  description: A cross-border banking API with instant settlements and unmatched liquidity, powered by stablecoins.
servers:
  - url: https://api-staging.int.lumx.io
  - url: https://api-sandbox.lumx.io
  - url: https://api.lumx.io
paths:
  /customers:
    post:
      summary: Create a customer
      description: This endpoint creates a customer. At least one document is required.
      tags:
        - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerRequest"
      responses:
        "201":
          description: Successfully created the customer.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Invalid request parameters
        "409":
          description: An error ocurred trying to create a customer
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Another customer with the same document already exists
                  customer:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 3d830599-f834-43c9-93f1-3ff6cf84798c
      security:
        - apiKey: []
    get:
      tags:
        - Customers
      summary: Read all customers
      description: This endpoint reads all customers.
      # parameters:
      #   - in: query
      #     name: cursor
      #     schema:
      #       type: string
      #     required: false
      #     description: The cursor for pagination.
      #   - in: query
      #     name: size
      #     schema:
      #       type: integer
      #     required: false
      #     description: The number of customers to return.
      responses:
        "200":
          description: The list of customers was retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Customer"
                  # pagination:
                  #   type: object
                  #   properties:
                  #     cursor:
                  #       type: string
                  #     pageSize:
                  #       type: number
      security:
        - apiKey: []
  "/customers/{id}":
    get:
      tags:
        - Customers
      summary: Read a customer
      description: This endpoint reads a customer's details.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the customer.
      responses:
        "200":
          description: Customer details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "404":
          description: Customer not found!.
      security:
        - apiKey: []
    patch:
      tags:
        - Customers
      summary: Update a customer
      description: This endpoint updates a customer's details including documents. Each field is optional, so you can update only some of the customer's details. If a document is provided, it will be updated or added to the customer's documents list.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerPatchRequest"
      responses:
        "200":
          description: Customer updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Invalid request parameters.
        "404":
          description: Customer not found!
        "409":
          description: An error ocurred trying to create a customer
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Another customer with the same document already exists
                  customer:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 3d830599-f834-43c9-93f1-3ff6cf84798c
      security:
        - apiKey: []
  /exchange-rate:
    get:
      tags:
        - Exchange Rates
      summary: Get an exchange rate
      description: Get a price quote for converting between currencies.
      parameters:
        - name: sourceCurrency
          in: query
          required: true
          schema:
            type: string
            enum: [BRL, USDC, USDT]
          description: The currency to convert from.
        - name: targetCurrency
          in: query
          required: true
          schema:
            type: string
            enum: [BRL, USDC, USDT]
          description: The currency to convert to.
      responses:
        "200":
          description: Exchange rate quote returned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeRateResponse"
      security:
        - apiKey: []
  /transactions/on-ramp:
    post:
      tags:
        - Transactions
      summary: On-ramp
      description: >-
        Convert BRL (Brazilian Real) to USDC or USDT.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CrossRampRequest"
      responses:
        "202":
          description: On-ramp operation created successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TransactionResponse"
                  - $ref: "#/components/schemas/CrossRampResponse"
                  - $ref: "#/components/schemas/TransactionTimeStamps"
        "400":
          description: Invalid request parameters.
        "402":
          description: Insufficient funds.
      security:
        - apiKey: []
  /transactions/off-ramp:
    post:
      tags:
        - Transactions
      summary: Off-ramp
      description: >-
        Convert USDC or USDT to BRL (Brazilian Real).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CrossRampRequest"
                - type: object
      responses:
        "202":
          description: Off-ramp operation created successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TransactionResponse"
                  - $ref: "#/components/schemas/CrossRampResponse"
                  - $ref: "#/components/schemas/TransactionTimeStamps"
        "400":
          description: Invalid request parameters.
        "402":
          description: Insufficient funds.
      security:
        - apiKey: []
  /transactions/transfer:
    post:
      tags:
        - Transactions
      summary: Transfer
      description: >-
        Transfer tokens from a wallet.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - allOf:
                    - $ref: "#/components/schemas/TransactionTransferRequest"
                      title: Non-fungible token
                      required:
                        - contractId
                        - to
                        - from
                    - type: object
                      properties:
                        tokenId:
                          type: string
                          description: >-
                            The ID of the token that will be transferred. Not applicable for fungible tokens.
                      required:
                        - tokenId
                - allOf:
                    - $ref: "#/components/schemas/TransactionTransferRequest"
                      title: Fungible token
                      required:
                        - contractId
                        - to
                        - from
                    - type: object
                      properties:
                        quantity:
                          type: number
                          description: >-
                            The quantity of tokens to transfer. Not applicable for non-fungible.
                            tokens.
                      required:
                        - quantity
      responses:
        "202":
          description: >-
            The transfer operation was submitted to the blockchain. Important:.
            This is an ASYNC route! Use the read transaction route to check the
            transfer's status.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TransactionResponse"
                  - $ref: "#/components/schemas/TransactionTransferResponse"
                  - $ref: "#/components/schemas/TransactionTimeStamps"
      security:
        - apiKey: []
  /transactions/swap:
    post:
      tags:
        - Transactions
      summary: Swap
      description: Perform a swap between two stablecoins.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SwapRequest"
              required:
                - customerId
      responses:
        "202":
          description: >-
            The transaction was submitted to the blockchain. Important: This is.
            an ASYNC route! Use the read transaction route to check its status.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TransactionResponse"
                  - $ref: "#/components/schemas/TransactionTimeStamps"
      security:
        - apiKey: []
  "/transactions/{transactionId}/execute":
    post:
      tags:
        - Transactions
      summary: Execute a transaction
      description: For custodial projects. Execute a transaction previously signed by your signing provider.
      parameters:
        - name: transactionId
          in: path
          description: The ID of the transaction.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionExecuteEncodedRequest"
              required:
                - signedTransaction
      responses:
        "202":
          description: "The transaction was submitted to the blockchain. Important: This is an ASYNC route! Use the read transaction route to check the transaction's status."
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Transfer
                    allOf:
                      - $ref: "#/components/schemas/TransactionResponse"
                      - $ref: "#/components/schemas/TransactionTransferResponse"
                      - $ref: "#/components/schemas/TransactionTimeStamps"
                  - type: object
                    title: Swap
                    allOf:
                      - $ref: "#/components/schemas/TransactionResponse"
                      - $ref: "#/components/schemas/TransactionTimeStamps"
        "404":
          description: Transaction not found!.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Transaction not found!
      security:
        - apiKey: []
  /transactions:
    get:
      tags:
        - Transactions
      summary: Read all transactions
      description: This endpoint reads all transactions made with your API key.
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
          required: false
          description: The cursor for pagination.
        - in: query
          name: size
          schema:
            type: integer
          required: false
          description: The number of transactions to return.
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          required: false
          description: The start date and time for filtering the results.
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          required: false
          description: The end date and time for filtering the results.
        - in: query
          name: type
          schema:
            type: string
            enum:
              - mint
              - transfer
              - custom
          required: false
          description: The type of the transaction.
        - in: query
          name: status
          schema:
            type: string
            enum:
              - success
              - failed
              - created
          required: false
          description: The status of the transaction.
        - in: query
          name: contractId
          schema:
            type: string
          description: The id of the contract.
      responses:
        "200":
          description: The list of transactions was retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: An array containing all transactions made by wallets of this project.
                    items:
                      oneOf:
                        - type: object
                          title: Mints
                          allOf:
                            - $ref: "#/components/schemas/TransactionResponse"
                            - $ref: "#/components/schemas/TransactionTimeStamps"
                        - type: object
                          title: Transfers
                          allOf:
                            - $ref: "#/components/schemas/TransactionResponse"
                            - $ref: "#/components/schemas/TransactionTransferResponse"
                            - $ref: "#/components/schemas/TransactionTimeStamps"
                        - type: object
                          title: Custom
                          allOf:
                            - $ref: "#/components/schemas/TransactionResponse"
                            - $ref: "#/components/schemas/TransactionTimeStamps"
                  pagination:
                    type: object
                    properties:
                      cursor:
                        type: string
                        description: The cursor for the next page.
                      pageSize:
                        type: number
                        description: The size of the page.
      security:
        - apiKey: []
  "/transactions/{transactionId}":
    get:
      tags:
        - Transactions
      summary: Read a transaction
      description: This endpoint reads a transaction made with your API key.
      parameters:
        - name: transactionId
          in: path
          description: The ID of the transaction.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The details of the transaction were retrieved successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Mint
                    allOf:
                      - $ref: "#/components/schemas/TransactionResponse"
                      - $ref: "#/components/schemas/TransactionTimeStamps"
                  - type: object
                    title: Transfer
                    allOf:
                      - $ref: "#/components/schemas/TransactionResponse"
                      - $ref: "#/components/schemas/TransactionTransferResponse"
                      - $ref: "#/components/schemas/TransactionTimeStamps"
                  - type: object
                    title: Custom
                    allOf:
                      - $ref: "#/components/schemas/TransactionResponse"
                      - $ref: "#/components/schemas/TransactionTimeStamps"
        "404":
          description: Transaction not found!.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Transaction not found!
      security:
        - apiKey: []
components:
  schemas:
    Blockchains:
      type: string
      description: The name of the blockchain.
      enum:
        - Ethereum
        - Polygon
        - Chiliz
        - Linea
    WalletPaginationResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/WalletResponse"
        pagination:
          type: object
          properties:
            cursor:
              type: string
              description: The cursor for the next page.
            pageSize:
              type: number
              description: The size of the page.
    WalletResponse:
      type: object
      properties:
        id:
          type: string
          description: The id of the wallet.
          format: uuid
        customerId:
          type: string
          format: uuid
          description: The ID of the customer who owns this wallet.
        address:
          description: The blockchain address of the wallet.
          type: string
        blockExplorerUrl:
          type: string
          nullable: true
          description: The URL of the block explorer for this wallet.
        createdAt:
          type: string
          format: date-time
          description: The timestamp from when the wallet was created.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp from when the wallet was last updated.
        activatedAt:
          type: string
          format: date-time
          description: The timestamp from when the wallet was activated.
    TransactionTransferRequest:
      type: object
      properties:
        contractId:
          type: string
          format: uuid
          description: The id of the contract to which the tokens belong.
        from:
          type: string
          format: uuid
          description: The id of the wallet that is transferring the tokens.
        to:
          type: string
          description: The address or ID of the wallet receiving the tokens. Can be any address, not limited to wallets created through the API.
          examples:
            - "0xa65aae78edef916d4102ba7b5672068c0d35fbff"
            - "123e4567-e89b-12d3-a456-426614174000"
    TransactionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The id of the transaction.
        walletId:
          type: string
          format: uuid
          description: The id of the wallet that performed the transaction.
        status:
          type: string
          description: The status of the transaction on the blockchain.
          enum:
            - created
            - success
            - failed
        transactionHash:
          type: string
          description: The identifier of this transaction on the blockchain.
          nullable: true
        blockExplorerUrl:
          type: string
          nullable: true
          description: The URL of the block explorer where the details of this transaction can be read.
        result:
          description: "Contains detailed information about the transaction receipts, including cost, messages, and operation results."
          type: object
    TransactionTimeStamps:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          description: The timestamp from when the transaction was submitted.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp from when the transaction was last updated.
        completedAt:
          type: string
          format: date-time
          description: The timestamp from when the transaction was completed.
          nullable: true
    TransactionTransferResponse:
      type: object
      properties:
        request:
          description: An object containing the parameters used for this transaction.
          $ref: "#/components/schemas/TransferMetadata"
        type:
          type: string
          description: The type of transaction.
          enum:
            - transfer
    TransferMetadata:
      type: object
      title: Transfer - fungible
      description: Parameters for transferring fungible tokens.
      properties:
        contractId:
          type: string
          format: uuid
          description: The id of the fungible token contract.
        quantity:
          type: number
          description: Quantity of tokens transferred.
          minimum: 1
        from:
          type: string
          format: uuid
          description: The id of the wallet that is transferring the tokens.
        to:
          type: string
          description: The address of the wallet that will receive the tokens. It can be any address, not limited to wallets created through the API.
          example: "0xa65aae78edef916d4102ba7b5672068c0d35fbff"
    SignMessageRequest:
      type: object
      properties:
        message:
          type: string
      description: >-
        The message that will be signed.
      required:
        - message
    SignMessageResponse:
      type: object
      properties:
        signedMessage:
          type: string
          description: >-
            The signature of the message in hexadecimal format.
    TransactionExecuteEncodedRequest:
      type: object
      properties:
        signedTransaction:
          type: string
          description: The signed transaction that was returned by your signing provider.
    CustomerRequest:
      type: object
      required:
        - name
        - birthdate
        - documents
      additionalProperties: false
      properties:
        name:
          type: string
          description: Customer full name
        birthdate:
          type: string
          description: Customer birth date (yyyy-mm-dd)
          format: date
          example: "1970-01-01"
        passkeyPublicKey:
          type: string
          description: Customer's passkey public key
        documents:
          type: array
          description: List of customer documents
          minItems: 1
          items:
            $ref: "#/components/schemas/CustomerDocument"
          example:
            - country: BRA
              type: TAX_ID
              value: 123.456.789-00
    CustomerPatchRequest:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          description: Customer full name
        birthdate:
          type: string
          description: Customer birth date (yyyy-mm-dd)
          format: date
          example: "1970-01-01"
        passkeyPublicKey:
          type: string
          description: Customer's passkey public key
        documents:
          type: array
          description: List of customer documents
          minItems: 1
          items:
            $ref: "#/components/schemas/CustomerDocument"
          example:
            - country: BRA
              type: TAX_ID
              value: 123.456.789-00
    Customer:
      type: object
      properties:
        id:
          type: string
          description: Unique customer identifier
          format: uuid
        name:
          type: string
          description: Customer full name
        birthdate:
          type: string
          description: Customer birth date
          format: date
        passkeyPublicKey:
          type: string
          description: Customer's passkey public key
        documents:
          type: array
          description: List of customer documents
          items:
            $ref: "#/components/schemas/CustomerDocument"
          example:
            - country: BRA
              type: TAX_ID
              value: 123.456.789-00
        createdAt:
          type: string
          description: Record creation timestamp
          format: date-time
        updatedAt:
          type: string
          description: Record last update timestamp
          format: date-time
    CustomerDocument:
      type: object
      required:
        - country
        - type
        - value
      additionalProperties: false
      properties:
        country:
          type: string
          description: The country code that issued the document following ISO 3166-1 alpha-2 (BRA is the only one accepted at the moment)
          enum: [BRA]
        type:
          type: string
          description: The type of document (TAX_ID is the only one accepted at the moment)
          enum: [TAX_ID]
        value:
          type: string
          description: The document value/number.
          example: 000.000.000-00
    CrossRampRequest:
      type: object
      required:
        - customerId
        - paymentMethod
      properties:
        customerId:
          type: string
          format: uuid
          description: The customer sending or receiving funds in the operation.
        paymentMethod:
          type: string
          enum: [pix]
          description: The payment/payout method for BRL.
    OnRampRequest:
      type: object 
      required: 
        - sourceCurrency
        - targetCurrency
      properties:
        sourceCurrency:
          type: string
          enum: [BRL]
          description: The fiat currency to convert from.
        targetCurrency:
          type: string
          enum: [USDC, USDT]
          description: The stablecoin to convert to.
    OffRampRequest:
      type: object 
      required: 
        - sourceCurrency
        - targetCurrency
      properties:
        sourceCurrency:
          type: string
          enum: [USDC, USDT]
          description: The stablecoin to convert from.
        targetCurrency:
          type: string
          enum: [BRL]
          description: The fiat currency to convert to.
    CrossRampResponse:
      type: object
      properties:
        request:
          type: object
          properties:
            customerId:
              type: string
              format: uuid
              description: The ID of the wallet involved in the operation.
            paymentMethod:
              type: string
              enum: [pix]
              description: The payment method used for the operation.
            pixKey:
              type: string
              description: The PIX key (required when payment method is pix).
        pixString:
          type: string
          description: The PIX string to be used for payment (only present in onramp transactions).
          example: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
    ExchangeRateResponse:
      type: object
      properties:
        sourceCurrency:
          type: string
          enum: [BRL, USDC, USDT]
          description: The currency to convert from.
        targetCurrency:
          type: string
          enum: [USDC, USDT, BRL]
          description: The currency to convert to.
        rate:
          type: number
          format: double
          example: 6.15
          description: The exchange rate between source and target currencies.
  securitySchemes:
    apiKey:
      type: http
      scheme: bearer
      description: Bearer authentication header of the form `Bearer <API_KEY>`.
